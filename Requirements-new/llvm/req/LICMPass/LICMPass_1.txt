The C program should contain the following pattern:

```c
#include <stdio.h>

int main() {
    int result = 0; // declare the result
    int i, j; // loop variables
    int array[10][10]; // declare a 2D array

    // Initialize the array with some values
    for (i = 0; i < 10; ++i) {
        for (j = 0; j < 10; ++j) {
            array[i][j] = i * j; // some computation
        }
    }

    // Outer loop
    for (i = 0; i < 10; ++i) {
        // Inner loop
        for (j = 0; j < 10; ++j) {
            // Perform some computation that involves a condition
            if (array[i][j] % 2 == 0) {
                result += array[i][j]; // accumulate result
            }
        }
    }

    // Return the result
    return result;
}
```

This pattern characterizes scenarios where there are nested loops, and within the inner loop, there is a computation involving a condition that uses elements from a data structure like an array. The computation should be such that it can be optimized by moving invariant code out of the loop. The `main` function initializes a data structure, performs computations within nested loops, and returns a result that is influenced by these computations. The loops should be structured in a way that allows for potential code motion optimizations, such as sinking or hoisting of instructions, which can lead to the use of poison values for unreachable code paths.