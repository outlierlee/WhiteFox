The C program should contain the following pattern:

```c
// declare a function with a specific calling convention
static int my_function(int a, int b) {
  int result = 0; // declare the result
  RANDOM_CODE; // Do something here with input arguments
  result = a OPERATOR b; // result is related to a and b
  return result;
}

int main() {
  int x = ANY_VALUE; // declare x
  int y = ANY_VALUE; // declare y
  int main_result = 0; // declare the result

  // invoke the function my_function
  main_result = my_function(x, y);

  return main_result; // return the result
}
```

This pattern characterizes scenarios where within the `main` function, there exists a call to `my_function`, and the result of this call is being used. The function `my_function` is marked as `static`, which will be translated into an IR function with internal linkage. The function should not have any attributes that prevent changing the calling convention, such as `varargs`, `address-taken`, or `musttail`. The `main` function must return a value related to this optimization for further comparison.

The `OPERATOR` could be any arithmetic or logical operator, such as `+`, `-`, `*`, `/`, `&`, `|`, etc. The `RANDOM_CODE` could be any code that does not affect the calling convention. Each declared variable should be initialized, such as `int a = 5;`.