The C program should contain the following pattern:

```c
// Define a function with a specific calling convention
// The function should not be a varargs function and should not have its address taken
static int my_function(int a, int b) {
  // Perform some operations
  return a + b;
}

int main() {
  int result = 0; // Declare a result variable
  // Call the function directly
  result = my_function(5, 10);
  return result; // Return the result
}
```

This pattern characterizes scenarios where within the `main` function, there exists a direct call to `my_function`, which is defined with a specific calling convention. The function `my_function` should be static (which translates to internal linkage in LLVM IR), should not be a varargs function, and should not have its address taken. The function should perform some operations and return a result. The `main` function should call this function directly and return the result of the call. The function should be eligible for calling convention changes, such as promoting to a fast calling convention, which is the focus of the optimization.