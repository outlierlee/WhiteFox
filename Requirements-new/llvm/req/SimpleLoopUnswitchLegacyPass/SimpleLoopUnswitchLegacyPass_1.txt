The C program should contain the following pattern:

```c
#include <stdio.h>

// Define a function with a loop containing a condition
void loop_with_condition(int n, int flag) {
    for (int i = 0; i < n; ++i) {
        if (flag) { // This condition should be invariant within the loop
            // Perform some operations
            printf("Flag is true, iteration %d\n", i);
        } else {
            // Perform some other operations
            printf("Flag is false, iteration %d\n", i);
        }
    }
}

int main() {
    int n = 10; // Loop iteration count
    int flag = 1; // Invariant condition for the loop

    // Call the function with the loop
    loop_with_condition(n, flag);

    return 0;
}
```

This pattern characterizes scenarios where within a function, there exists a loop with a condition that is invariant (i.e., does not change) throughout the loop's execution. The loop should be in a simplified form, meaning it has a preheader and dedicated exits. The condition should be trivial, allowing the loop to be unswitched based on this invariant condition. The `main` function calls this loop function, passing the invariant condition as an argument. The loop should not be marked for optimization size (`optsize`), and the loop nest should not be cold according to profile information. The program should be structured such that the loop can be safely unswitched without causing branch divergence issues.