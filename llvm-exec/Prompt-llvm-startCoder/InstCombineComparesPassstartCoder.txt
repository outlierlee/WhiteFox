### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code.


# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>

static int varargs_func(int x, ...) {
  int result = 10;
  if (x % 2) {
    result = x * 32 + 15;
  } else {
    result = x - 15;
  }
  if (x > 100) {
    result = result * 2;
  } else {
    result = result * 2;
  }
  return result;
}

int main() {
  int result = 0;
  int a = (1 << 31);
  std::vector<int> vec = {0, 1, 2, 3};
  std::string str = "hello";
  vec.assign(5, 42);
  int b = varargs_func(a, 18, 25, vec[1], 1.000000, str[3]);
  result = b;
  return result;
}
```
# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value.

# Description of requirements

The C program should contain the following pattern:

```c
#include <stdio.h>

// Define a global constant array
const int global_array[] = {ANY_CONSTANT_VALUES}; // The array should have a size less than MaxArraySizeForCombine

int main() {
    // Declare a variable to store the result
    int result = 0;

    // Use a loop or direct access to index into the global array
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        // Perform a comparison operation with a constant
        if (global_array[i] OPERATOR ANY_CONSTANT) {
            // Update the result based on the comparison
            result = i; // or any operation that uses the index
        }
    }

    // Return the result
    return result;
}
```

This pattern characterizes scenarios where within the `main` function, there is a loop or direct access to a global constant array. The program performs a comparison operation on each element of the array with a constant value. The result of the comparison is used to update a variable, which is then returned by the `main` function. The global array should be defined with constant values, and its size should be less than a predefined maximum size (`MaxArraySizeForCombine`). The comparison operation should be such that it can be optimized by the LLVM pass. The `OPERATOR` could be any comparison operator like `==`, `!=`, `<`, `>`, `<=`, or `>=`. The `ANY_CONSTANT_VALUES` and `ANY_CONSTANT` should be chosen to match the type of the array elements.

# C++ Code begins
