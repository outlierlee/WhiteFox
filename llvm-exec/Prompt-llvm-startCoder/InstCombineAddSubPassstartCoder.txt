### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code.


# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>

static int varargs_func(int x, ...) {
  int result = 10;
  if (x % 2) {
    result = x * 32 + 15;
  } else {
    result = x - 15;
  }
  if (x > 100) {
    result = result * 2;
  } else {
    result = result * 2;
  }
  return result;
}

int main() {
  int result = 0;
  int a = (1 << 31);
  std::vector<int> vec = {0, 1, 2, 3};
  std::string str = "hello";
  vec.assign(5, 42);
  int b = varargs_func(a, 18, 25, vec[1], 1.000000, str[3]);
  result = b;
  return result;
}
```
# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value.

# Description of requirements

The C program should contain the following pattern:

```c
#include <stdio.h>

int main() {
    // Declare and initialize floating-point variables
    float x = ANY_FLOAT_VALUE; // e.g., 1.0f
    float y = ANY_FLOAT_VALUE; // e.g., 2.0f
    float z = ANY_FLOAT_VALUE; // e.g., 3.0f
    float w = ANY_FLOAT_VALUE; // e.g., 4.0f

    // Perform a series of floating-point operations
    // The operations should be structured to match the pattern:
    // ((x - y) + z) - w
    float result = ((x - y) + z) - w;

    // Print the result to ensure the computation is used
    printf("Result: %f\n", result);

    return 0;
}
```

### Characteristics of the C Program:

1. **Floating-Point Operations**: The program should involve floating-point arithmetic operations, specifically subtraction and addition.

2. **Expression Pattern**: The expression `((x - y) + z) - w` is crucial. This pattern is designed to match the reassociation logic in the optimization pass, which looks for opportunities to rearrange operations to create more addition instructions and reduce dependency chains.

3. **Variable Initialization**: The variables `x`, `y`, `z`, and `w` should be initialized with any floating-point values. These values can be constants or derived from other computations.

4. **Use of Result**: The result of the computation should be used in some way, such as being printed, to ensure that the compiler does not optimize away the computation entirely.

5. **No Special Attributes**: The program should not involve any special attributes or function calls that would prevent the optimization from being applied, such as functions with special linkage or attributes that prevent reassociation.

By structuring the program in this way, it aligns with the conditions in the optimization pass that look for specific patterns in floating-point arithmetic to apply transformations.

# C++ Code begins
