### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code.


# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>

static int varargs_func(int x, ...) {
  int result = 10;
  if (x % 2) {
    result = x * 32 + 15;
  } else {
    result = x - 15;
  }
  if (x > 100) {
    result = result * 2;
  } else {
    result = result * 2;
  }
  return result;
}

int main() {
  int result = 0;
  int a = (1 << 31);
  std::vector<int> vec = {0, 1, 2, 3};
  std::string str = "hello";
  vec.assign(5, 42);
  int b = varargs_func(a, 18, 25, vec[1], 1.000000, str[3]);
  result = b;
  return result;
}
```
# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value.

# Description of requirements

The C program should contain the following pattern:

```c
#include <stdio.h>

// Define a function that is small and simple enough to be inlined
static inline int simple_function(int a, int b) {
    return a + b; // Simple operation that can be easily inlined
}

int main() {
    int x = 5; // Declare and initialize variable x
    int y = 10; // Declare and initialize variable y
    int result; // Declare a variable to store the result

    // Call the simple_function with x and y as arguments
    result = simple_function(x, y);

    // Return the result of the function call
    return result;
}
```

### Characteristics of the C Program:

1. **Function Definition**: The program defines a function `simple_function` that performs a simple operation (e.g., addition) on its arguments. This function is marked as `inline` to suggest that it is a candidate for inlining.

2. **Static Function**: The function is declared as `static`, which limits its linkage to the file scope, making it a candidate for inlining within the same translation unit.

3. **Function Call in `main`**: The `main` function calls `simple_function` with some arguments. The result of this call is used in the `main` function, which is a typical scenario where inlining can be beneficial.

4. **Simple Operations**: The operations within `simple_function` are simple and small, making it a good candidate for inlining due to the low overhead of the function body.

5. **No Complex Control Flow**: The function does not contain complex control flow structures (e.g., loops, conditionals) that might complicate inlining.

6. **Return Value**: The `main` function returns the result of the inlined function call, ensuring that the result is used and relevant to the program's output.

This pattern characterizes scenarios where a small, simple function is defined and called within the `main` function, making it a candidate for inlining by the compiler. The function's simplicity and the use of the `inline` keyword suggest to the compiler that inlining could be beneficial for performance.

# C++ Code begins
