### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code.


# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>

static int varargs_func(int x, ...) {
  int result = 10;
  if (x % 2) {
    result = x * 32 + 15;
  } else {
    result = x - 15;
  }
  if (x > 100) {
    result = result * 2;
  } else {
    result = result * 2;
  }
  return result;
}

int main() {
  int result = 0;
  int a = (1 << 31);
  std::vector<int> vec = {0, 1, 2, 3};
  std::string str = "hello";
  vec.assign(5, 42);
  int b = varargs_func(a, 18, 25, vec[1], 1.000000, str[3]);
  result = b;
  return result;
}
```
# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value.

# Description of requirements

The C program should contain the following pattern:

```c
#include <stdio.h>

// declare variables
int a = ANY_VALUE; // declare a
int b = ANY_VALUE; // declare b
int c = ANY_VALUE; // declare c

int main() {
  int result = 0; // declare the result

  // perform a series of arithmetic operations
  result = (a + b) + c; // associative operation
  result = (result * a) * b; // another associative operation
  result = (result - c) - a; // yet another associative operation

  // use the result in a way that it is not trivially dead
  printf("%d\n", result);

  return 0;
}
```

This pattern characterizes scenarios where within the `main` function, there are arithmetic operations that can be reassociated. The operations should be structured in a way that allows for reassociation, such as repeated addition, multiplication, or subtraction. The result of these operations should be used in a way that prevents the compiler from considering them trivially dead, such as by printing the result. The variables `a`, `b`, and `c` should be initialized with any integer values. The operations should be simple enough to allow the compiler to identify opportunities for reassociation, which can lead to the removal of dead instructions and trigger the optimization.

# C++ Code begins
