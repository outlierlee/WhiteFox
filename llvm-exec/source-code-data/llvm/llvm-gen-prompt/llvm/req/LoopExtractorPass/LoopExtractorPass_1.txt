The C program should contain the following pattern:

```c
#include <stdio.h>

// Define a function that contains a loop
void loop_function() {
  int i;
  int sum = 0; // Initialize a variable to accumulate results

  // A simple loop that iterates a fixed number of times
  for (i = 0; i < 10; i++) {
    sum += i; // Accumulate the sum of the loop index
  }

  // Print the result to ensure the loop is not optimized away
  printf("Sum: %d\n", sum);
}

int main() {
  // Call the function containing the loop
  loop_function();

  return 0; // Return 0 to indicate successful execution
}
```

This pattern characterizes scenarios where a function, such as `loop_function`, contains a loop that iterates a fixed number of times. The loop performs a simple operation, like accumulating a sum, which ensures that the loop is not trivially optimized away. The function is then called from the `main` function. The loop should be simple enough to be a candidate for extraction, and the function should be structured in a way that allows the loop to be isolated and extracted by the optimization pass. The `main` function must call this function to ensure the loop is executed.